import React, { useState } from 'react';
import { Button } from './ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from './ui/alert-dialog';
import { Copy, Check, QrCode } from 'lucide-react';
import { useCart } from '../App';
import { ImageWithFallback } from './figma/ImageWithFallback';
import zaloPayQRCode from 'figma:asset/b9d29449e21485a20c0bde057900203c56f2c67a.png';
import zaloPayLogo from 'figma:asset/c9eaa3b260d6477c7b2fe71f970bec6fc927d814.png';

interface ZaloPayButtonProps {
  amount: number;
  orderInfo: string;
  onSuccess: (paymentDetails: any) => void;
  onError: (error: any) => void;
  onCancel: () => void;
}

// Danh s√°ch ng√¢n h√†ng h·ªó tr·ª£ ZaloPay
const SUPPORTED_BANKS = [
  { code: 'vcb', name: 'Vietcombank', logo: 'üè¶' },
  { code: 'tcb', name: 'Techcombank', logo: 'üè¶' },
  { code: 'acb', name: 'ACB', logo: 'üè¶' },
  { code: 'bidv', name: 'BIDV', logo: 'üè¶' },
  { code: 'vtb', name: 'VietinBank', logo: 'üè¶' },
  { code: 'mb', name: 'MB Bank', logo: 'üè¶' },
  { code: 'vpb', name: 'VPBank', logo: 'üè¶' },
  { code: 'agb', name: 'Agribank', logo: 'üè¶' },
  { code: 'scb', name: 'Sacombank', logo: 'üè¶' },
  { code: 'stb', name: 'Saigonbank', logo: 'üè¶' },
  { code: 'eib', name: 'Eximbank', logo: 'üè¶' },
  { code: 'msb', name: 'MSB', logo: 'üè¶' },
  { code: 'hdbank', name: 'HDBank', logo: 'üè¶' },
  { code: 'tpb', name: 'TPBank', logo: 'üè¶' },
  { code: 'seab', name: 'SeABank', logo: 'üè¶' },
];

// Email notification service (mock implementation)
const sendEmailNotification = async (email: string, orderDetails: any) => {
  try {
    // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API backend ƒë·ªÉ g·ª≠i email
    const emailData = {
      to: email,
      subject: 'X√°c nh·∫≠n thanh to√°n ZaloPay - AGUST Jewelry',
      content: `
        K√≠nh ch√†o qu√Ω kh√°ch,
        
        AGUST Jewelry xin x√°c nh·∫≠n ƒë∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng qua ZaloPay:
        
        üßæ Th√¥ng tin ƒë∆°n h√†ng:
        - M√£ ƒë∆°n h√†ng: ${orderDetails.orderNumber}
        - M√£ giao d·ªãch ZaloPay: ${orderDetails.transactionId}
        - Ng√¢n h√†ng thanh to√°n: ${orderDetails.bank_name}
        - S·ªë ti·ªÅn: ${orderDetails.amount.toLocaleString('vi-VN')} VND
        - Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}
        
        üöö Th√¥ng tin giao h√†ng:
        - Th·ªùi gian d·ª± ki·∫øn: 3-5 ng√†y l√†m vi·ªác
        - AGUST s·∫Ω li√™n h·ªá x√°c nh·∫≠n ƒë·ªãa ch·ªâ giao h√†ng
        
        üìû H·ªó tr·ª£ kh√°ch h√†ng:
        - Hotline: 0981 654 116
        - Email: support@agust.vn
        
        C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† mua s·∫Øm t·∫°i AGUST!
        
        Tr√¢n tr·ªçng,
        AGUST Jewelry Team
      `
    };
    
    // Mock API call - trong th·ª±c t·∫ø s·∫Ω g·ªçi service email nh∆∞ SendGrid, AWS SES, etc.
    console.log('üìß Sending email notification:', emailData);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Mock successful response
    return { success: true, messageId: `msg_${Date.now()}` };
  } catch (error) {
    console.error('‚ùå Email notification failed:', error);
    throw error;
  }
};

export function ZaloPayButton({ amount, orderInfo, onSuccess, onError, onCancel }: ZaloPayButtonProps) {
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedBank, setSelectedBank] = useState('vcb');
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [showQRCode, setShowQRCode] = useState(false);
  const [copiedField, setCopiedField] = useState<string | null>(null);
  const { cartItems } = useCart();

  const getSelectedBankInfo = () => {
    return SUPPORTED_BANKS.find(bank => bank.code === selectedBank) || SUPPORTED_BANKS[0];
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const copyToClipboard = (text: string, field: string) => {
    navigator.clipboard.writeText(text);
    setCopiedField(field);
    setTimeout(() => setCopiedField(null), 2000);
  };

  const handlePaymentClick = () => {
    if (!selectedBank) {
      onError(new Error('Vui l√≤ng ch·ªçn ng√¢n h√†ng thanh to√°n'));
      return;
    }
    // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
    setShowConfirmDialog(true);
  };

  const handleConfirmPayment = async () => {
    setShowConfirmDialog(false);
    setIsProcessing(true);
    
    try {
      const selectedBankInfo = getSelectedBankInfo();
      
      // Mock ZaloPay payment process
      // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API ZaloPay ƒë·ªÉ t·∫°o giao d·ªãch
      const paymentData = {
        app_id: 2554, // ZaloPay App ID demo
        app_trans_id: `AGUST_${Date.now()}`, // Transaction ID
        app_user: `user_${Date.now()}`,
        amount: amount,
        description: orderInfo,
        bank_code: selectedBank, // M√£ ng√¢n h√†ng ƒë∆∞·ª£c ch·ªçn
        item: JSON.stringify(cartItems.map(item => ({
          itemid: item.id,
          itemname: item.name,
          itemprice: item.price,
          itemquantity: item.quantity
        }))),
        embed_data: JSON.stringify({
          merchantinfo: "AGUST Jewelry",
          promotioninfo: "",
          redirecturl: window.location.origin,
          bankinfo: selectedBankInfo.name
        }),
        callback_url: `${window.location.origin}/zalopay/callback`,
        mac: "mock_mac_signature" // Trong th·ª±c t·∫ø c·∫ßn t√≠nh MAC signature
      };

      // M√¥ ph·ªèng vi·ªác redirect ƒë·∫øn ZaloPay
      console.log('ZaloPay Payment Data:', paymentData);
      
      // Simulate payment processing delay (longer for bank selection)
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock successful payment response
      const successResponse = {
        app_trans_id: paymentData.app_trans_id,
        zp_trans_id: `ZP_${Date.now()}`,
        transactionId: `ZP_${Date.now()}`,
        amount: paymentData.amount,
        status: 1, // 1 = success
        message: "Thanh to√°n th√†nh c√¥ng",
        payment_method: "ZaloPay",
        bank_code: selectedBank,
        bank_name: selectedBankInfo.name,
        created_time: new Date().toISOString(),
        orderNumber: paymentData.app_trans_id
      };

      // G·ª≠i email notification sau khi thanh to√°n th√†nh c√¥ng
      try {
        await sendEmailNotification('Agust2004@gmail.com', successResponse);
        console.log('‚úÖ Email notification sent successfully');
      } catch (emailError) {
        console.warn('‚ö†Ô∏è Email notification failed, but payment was successful:', emailError);
        // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m fail payment flow
      }

      onSuccess(successResponse);
      
    } catch (error) {
      console.error('ZaloPay payment error:', error);
      onError(error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCancelPayment = () => {
    setShowConfirmDialog(false);
  };

  return (
    <div className="space-y-4">
      <div className="bg-gray-900 p-4 rounded-lg border border-gray-700">
        <div className="flex items-center space-x-3 mb-3">
          <div className="w-8 h-8 bg-gray-800 rounded flex items-center justify-center p-1">
            <ImageWithFallback
              src={zaloPayLogo}
              alt="ZaloPay Logo"
              className="w-full h-full object-contain"
            />
          </div>
          <h3 className="text-white font-medium">ZaloPay</h3>
        </div>
        
        <div className="text-gray-300 text-sm space-y-2">
          <p>‚Ä¢ Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ ZaloPay</p>
          <p>‚Ä¢ H·ªó tr·ª£ thanh to√°n b·∫±ng th·∫ª ng√¢n h√†ng, v√≠ ZaloPay</p>
          <p>‚Ä¢ B·∫£o m·∫≠t cao v·ªõi c√¥ng ngh·ªá m√£ h√≥a</p>
          <p>‚Ä¢ Giao d·ªãch nhanh ch√≥ng, ti·ªán l·ª£i</p>
        </div>
      </div>

      {/* Bank Selection */}
      <div className="bg-gray-800 p-4 rounded-lg border border-gray-600">
        <h4 className="text-white font-medium mb-3">Ch·ªçn ng√¢n h√†ng thanh to√°n</h4>
        <Select value={selectedBank} onValueChange={setSelectedBank}>
          <SelectTrigger className="w-full bg-gray-700 border-gray-600 text-white">
            <SelectValue placeholder="Ch·ªçn ng√¢n h√†ng..." />
          </SelectTrigger>
          <SelectContent className="bg-gray-800 border-gray-600">
            {SUPPORTED_BANKS.map((bank) => (
              <SelectItem 
                key={bank.code} 
                value={bank.code}
                className="text-white hover:bg-gray-700 focus:bg-gray-700"
              >
                <div className="flex items-center space-x-2">
                  <span>{bank.logo}</span>
                  <span>{bank.name}</span>
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        
        {selectedBank && (
          <div className="mt-3 p-3 bg-blue-600 bg-opacity-20 border border-blue-600 rounded">
            <div className="flex items-center space-x-2 text-blue-300 text-sm">
              <span>{getSelectedBankInfo().logo}</span>
              <span>ƒê√£ ch·ªçn: {getSelectedBankInfo().name}</span>
            </div>
          </div>
        )}

        {/* QR Code Section */}
        {!showQRCode && (
          <div className="mt-4">
            <Button
              onClick={() => setShowQRCode(true)}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white"
            >
              <QrCode className="w-4 h-4 mr-2" />
              Hi·ªÉn th·ªã m√£ QR ZaloPay
            </Button>
          </div>
        )}

        {showQRCode && (
          <div className="mt-4 space-y-4">
            {/* ZaloPay QR Card Style */}
            <div className="bg-gradient-to-br from-blue-600 to-blue-700 p-6 rounded-lg text-center">
              {/* QR Scan instruction */}
              <div className="flex items-center justify-center text-white mb-4">
                <QrCode className="w-5 h-5 mr-2" />
                <span className="text-sm font-medium">QU√âT M√É ƒê·ªÇ THANH TO√ÅN</span>
              </div>
              
              {/* QR Code */}
              <div className="bg-white p-4 rounded-xl inline-block mb-4">
                <ImageWithFallback
                  src={zaloPayQRCode}
                  alt="QR Code ZaloPay"
                  className="w-48 h-48 mx-auto"
                />
              </div>
              
              {/* Payment method */}
              <div className="text-white text-lg font-bold mb-2">
                AGUST Jewelry
              </div>
              
              {/* Additional info */}
              <div className="text-blue-100 text-sm mb-2">
                Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ ZaloPay
              </div>
              <div className="text-blue-100 text-sm mb-4">
                H·ªó tr·ª£ thanh to√°n ng√¢n h√†ng & th·∫ª t√≠n d·ª•ng
              </div>
              <div className="text-white font-semibold text-lg">
                {formatPrice(amount)}
              </div>
            </div>

            {/* Payment and order info */}
            <div className="bg-gray-800 p-4 rounded-lg">
              <div className="flex justify-between items-center mb-2">
                <span className="text-gray-400 text-sm">S·ªë ti·ªÅn c·∫ßn thanh to√°n:</span>
                <span className="text-white font-semibold">{formatPrice(amount)}</span>
              </div>
              <div className="flex justify-between items-center mb-2">
                <span className="text-gray-400 text-sm">Ng√¢n h√†ng ƒë√£ ch·ªçn:</span>
                <span className="text-white text-sm">{getSelectedBankInfo().name}</span>
              </div>
              <div className="text-center mt-3">
                <p className="text-gray-400 text-xs">
                  Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ZaloPay ho·∫∑c camera ƒëi·ªán tho·∫°i ƒë·ªÉ thanh to√°n t·ª± ƒë·ªông
                </p>
              </div>
            </div>

            <Button
              variant="ghost"
              onClick={() => setShowQRCode(false)}
              className="w-full text-gray-400 hover:text-white"
            >
              ·∫®n m√£ QR
            </Button>
          </div>
        )}
      </div>

      <Button
        onClick={handlePaymentClick}
        disabled={isProcessing || !selectedBank}
        className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg transition-colors disabled:opacity-50"
      >
        {isProcessing ? (
          <div className="flex items-center justify-center space-x-2">
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            <span>ƒêang x·ª≠ l√Ω v·ªõi {getSelectedBankInfo().name}...</span>
          </div>
        ) : (
          <div className="flex items-center justify-center space-x-2">
            <span>Thanh to√°n v·ªõi ZaloPay</span>
            <span className="text-blue-200">qua {getSelectedBankInfo().name}</span>
          </div>
        )}
      </Button>

      {isProcessing && (
        <div className="bg-blue-900/30 border border-blue-600 p-3 rounded-lg">
          <p className="text-blue-300 text-sm text-center">
            ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn {getSelectedBankInfo().name} ƒë·ªÉ ho√†n t·∫•t thanh to√°n...
          </p>
        </div>
      )}

      {/* Confirmation Dialog */}
      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <AlertDialogContent className="bg-gray-900 border-gray-700">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-white flex items-center">
              <div className="w-6 h-6 bg-gray-800 rounded flex items-center justify-center mr-2 p-0.5">
                <ImageWithFallback
                  src={zaloPayLogo}
                  alt="ZaloPay Logo"
                  className="w-full h-full object-contain"
                />
              </div>
              X√°c nh·∫≠n thanh to√°n ZaloPay
            </AlertDialogTitle>
            <AlertDialogDescription className="text-gray-300">
              <div className="space-y-3">
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øn h√†nh thanh to√°n v·ªõi th√¥ng tin sau kh√¥ng?</p>
                
                <div className="bg-gray-800 p-3 rounded border">
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">S·ªë ti·ªÅn:</span>
                      <span className="text-white font-semibold">{formatPrice(amount)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Ng√¢n h√†ng:</span>
                      <span className="text-white">{getSelectedBankInfo().name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Ph∆∞∆°ng th·ª©c:</span>
                      <span className="text-blue-400">ZaloPay</span>
                    </div>
                  </div>
                </div>
                
                <div className="bg-yellow-600 bg-opacity-20 border border-yellow-600 p-3 rounded">
                  <p className="text-yellow-300 text-sm">
                    üí° Sau khi thanh to√°n th√†nh c√¥ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n t·ª´: <strong>Agust2004@gmail.com</strong>
                  </p>
                </div>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="space-x-2">
            <AlertDialogCancel 
              onClick={handleCancelPayment}
              className="bg-gray-700 text-white border-gray-600 hover:bg-gray-600"
            >
              H·ªßy b·ªè
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleConfirmPayment}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              X√°c nh·∫≠n thanh to√°n
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}