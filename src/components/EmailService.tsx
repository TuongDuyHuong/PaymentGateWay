// EmailService.tsx - Service ƒë·ªÉ g·ª≠i email th√¥ng b√°o cho kh√°ch h√†ng
import emailjs from '@emailjs/browser';

export interface EmailData {
  to: string;
  subject: string;
  customerName: string;
  orderNumber: string;
  amount: number;
  paymentMethod: string;
  type: 'pending_confirmation' | 'payment_confirmed' | 'order_status_update';
  status?: string;
  bankInfo?: {
    bank: string;
    accountNumber: string;
    accountName: string;
    transferContent: string;
  };
}

export class EmailService {
  // EmailJS Configuration - C·∫¶N ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T V·ªöI TH√îNG TIN TH·∫¨T
  private static readonly SERVICE_ID = 'YOUR_SERVICE_ID'; // C·∫ßn thay b·∫±ng Service ID th·∫≠t
  private static readonly TEMPLATE_ID = 'YOUR_TEMPLATE_ID'; // C·∫ßn thay b·∫±ng Template ID th·∫≠t  
  private static readonly PUBLIC_KEY = 'YOUR_PUBLIC_KEY'; // C·∫ßn thay b·∫±ng Public Key th·∫≠t

  // Demo mode - set to true to use simulation instead of real EmailJS
  private static readonly DEMO_MODE = true;

  // Initialize EmailJS
  static initialize() {
    if (!this.DEMO_MODE && this.PUBLIC_KEY !== 'YOUR_PUBLIC_KEY') {
      emailjs.init(this.PUBLIC_KEY);
    }
  }

  // Check if EmailJS is properly configured
  static isConfigured(): boolean {
    return this.SERVICE_ID !== 'YOUR_SERVICE_ID' && 
           this.TEMPLATE_ID !== 'YOUR_TEMPLATE_ID' && 
           this.PUBLIC_KEY !== 'YOUR_PUBLIC_KEY';
  }

  // H√†m g·ª≠i email - t·ª± ƒë·ªông ch·ªçn demo mode ho·∫∑c EmailJS th·∫≠t
  static async sendEmail(emailData: EmailData): Promise<boolean> {
    try {
      console.log('üîÑ ƒêang g·ª≠i email...');
      console.log('üìß Email Data:', emailData);

      // T·∫°o n·ªôi dung email d·ª±a tr√™n type
      const emailContent = this.generateEmailContent(emailData);

      // Ki·ªÉm tra n·∫øu ƒëang ·ªü demo mode ho·∫∑c ch∆∞a c·∫•u h√¨nh EmailJS
      if (this.DEMO_MODE || !this.isConfigured()) {
        console.log('üìù Ch·∫ø ƒë·ªô DEMO - M√¥ ph·ªèng g·ª≠i email');
        console.log('üìß N·ªôi dung email s·∫Ω g·ª≠i:', emailContent);
        
        // Simulate email sending delay
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        console.log('‚úÖ Email DEMO ƒë√£ ƒë∆∞·ª£c "g·ª≠i" th√†nh c√¥ng!');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o demo cho user
        this.showDemoNotification(emailData, emailContent);
        
        return true;
      }

      // Initialize EmailJS if configured
      this.initialize();
      
      // Prepare template parameters for EmailJS
      const templateParams = {
        to_email: emailData.to,
        to_name: emailData.customerName,
        subject: emailContent.subject,
        customer_name: emailData.customerName,
        order_number: emailData.orderNumber,
        amount: emailContent.amount,
        payment_method: emailData.paymentMethod,
        timestamp: emailContent.timestamp,
        message_content: emailContent.content,
        from_name: 'AGUST Jewelry',
        reply_to: 'support@agust.vn'
      };

      // Send email via EmailJS
      const response = await emailjs.send(
        this.SERVICE_ID,
        this.TEMPLATE_ID,
        templateParams
      );

      console.log('‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua EmailJS!', response);
      console.log('üì® Email Response:', response);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o cho user
      this.showEmailNotification(emailData);
      
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói g·ª≠i email:', error);
      
      // Fallback to demo mode if EmailJS fails
      console.log('üîÑ Chuy·ªÉn sang ch·∫ø ƒë·ªô demo do l·ªói EmailJS...');
      return await this.sendEmailDemo(emailData);
    }
  }

  // Fallback demo email sending
  private static async sendEmailDemo(emailData: EmailData): Promise<boolean> {
    try {
      const emailContent = this.generateEmailContent(emailData);
      
      console.log('üìù Ch·∫ø ƒë·ªô FALLBACK DEMO - M√¥ ph·ªèng g·ª≠i email');
      console.log('üìß N·ªôi dung email:', emailContent);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      this.showDemoNotification(emailData, emailContent);
      
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói trong demo mode:', error);
      this.showErrorNotification(emailData, error);
      return false;
    }
  }

  // T·∫°o n·ªôi dung email d·ª±a tr√™n lo·∫°i th√¥ng b√°o
  private static generateEmailContent(emailData: EmailData) {
    const formatPrice = (price: number) => {
      return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
      }).format(price);
    };

    const baseContent = {
      to: emailData.to,
      subject: emailData.subject,
      customerName: emailData.customerName,
      orderNumber: emailData.orderNumber,
      amount: formatPrice(emailData.amount),
      paymentMethod: emailData.paymentMethod,
      timestamp: new Date().toLocaleString('vi-VN'),
    };

    switch (emailData.type) {
      case 'pending_confirmation':
        return {
          ...baseContent,
          subject: `[AGUST] Ch·ªù x√°c nh·∫≠n thanh to√°n - ƒê∆°n h√†ng ${emailData.orderNumber}`,
          content: `
K√≠nh ch√†o ${emailData.customerName},

C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i AGUST Jewelry!

TH√îNG TIN ƒê√îN H√ÄNG:
‚Ä¢ M√£ ƒë∆°n h√†ng: ${emailData.orderNumber}
‚Ä¢ T·ªïng ti·ªÅn: ${formatPrice(emailData.amount)}
‚Ä¢ Ph∆∞∆°ng th·ª©c thanh to√°n: ${emailData.paymentMethod}
‚Ä¢ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}

üîÑ TR·∫†NG TH√ÅI: CH·ªú X√ÅC NH·∫¨N THANH TO√ÅN

Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o b·∫°n ƒë√£ chuy·ªÉn kho·∫£n. ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c ki·ªÉm tra v√† s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n trong v√≤ng 1-2 gi·ªù l√†m vi·ªác.

${emailData.bankInfo ? `
TH√îNG TIN CHUY·ªÇN KHO·∫¢N:
‚Ä¢ Ng√¢n h√†ng: ${emailData.bankInfo.bank}
‚Ä¢ S·ªë t√†i kho·∫£n: ${emailData.bankInfo.accountNumber}
‚Ä¢ Ch·ªß t√†i kho·∫£n: ${emailData.bankInfo.accountName}
‚Ä¢ N·ªôi dung CK: ${emailData.bankInfo.transferContent}
` : ''}

üìß B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n khi thanh to√°n ƒë∆∞·ª£c duy·ªát.

C·∫£m ∆°n b·∫°n ƒë√£ tin t·ª±·ªüng AGUST Jewelry!

---
AGUST Jewelry - Trang s·ª©c b·∫°c S925 cao c·∫•p
Email: support@agust.vn | Hotline: 1900 xxxx
          `,
        };

      case 'payment_confirmed':
        return {
          ...baseContent,
          subject: `[AGUST] ‚úÖ Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n - ƒê∆°n h√†ng ${emailData.orderNumber}`,
          content: `
K√≠nh ch√†o ${emailData.customerName},

üéâ THANH TO√ÅN ƒê√É ƒê∆Ø·ª¢C X√ÅC NH·∫¨N!

TH√îNG TIN ƒê√îN H√ÄNG:
‚Ä¢ M√£ ƒë∆°n h√†ng: ${emailData.orderNumber}
‚Ä¢ T·ªïng ti·ªÅn: ${formatPrice(emailData.amount)}
‚Ä¢ Ph∆∞∆°ng th·ª©c thanh to√°n: ${emailData.paymentMethod}
‚Ä¢ Tr·∫°ng th√°i: ‚úÖ ƒê√É X√ÅC NH·∫¨N THANH TO√ÅN

Ch√∫ng t√¥i ƒë√£ x√°c nh·∫≠n thanh to√°n c·ªßa b·∫°n th√†nh c√¥ng. ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c chu·∫©n b·ªã v√† giao trong 2-3 ng√†y l√†m vi·ªác.

üì¶ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn.

C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i AGUST Jewelry!

---
AGUST Jewelry - Trang s·ª©c b·∫°c S925 cao c·∫•p
Email: support@agust.vn | Hotline: 1900 xxxx
          `,
        };

      case 'order_status_update':
        return {
          ...baseContent,
          subject: `[AGUST] C·∫≠p nh·∫≠t ƒë∆°n h√†ng ${emailData.orderNumber} - ${emailData.status}`,
          content: `
K√≠nh ch√†o ${emailData.customerName},

ƒê∆°n h√†ng ${emailData.orderNumber} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i.

TH√îNG TIN C·∫¨P NH·∫¨T:
‚Ä¢ Tr·∫°ng th√°i m·ªõi: ${emailData.status}
‚Ä¢ Th·ªùi gian c·∫≠p nh·∫≠t: ${new Date().toLocaleString('vi-VN')}

C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng AGUST Jewelry!

---
AGUST Jewelry - Trang s·ª©c b·∫°c S925 cao c·∫•p
Email: support@agust.vn | Hotline: 1900 xxxx
          `,
        };

      default:
        return baseContent;
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o email ƒë√£ g·ª≠i
  private static showEmailNotification(emailData: EmailData) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm animate-slide-in';
    
    const typeLabels = {
      'pending_confirmation': 'Email ch·ªù x√°c nh·∫≠n',
      'payment_confirmed': 'Email x√°c nh·∫≠n thanh to√°n',
      'order_status_update': 'Email c·∫≠p nh·∫≠t tr·∫°ng th√°i'
    };
    
    notification.innerHTML = `
      <div class="flex items-center">
        <div class="mr-3">‚úÖ</div>
        <div>
          <div class="font-medium">${typeLabels[emailData.type] || 'Email ƒë√£ g·ª≠i!'}</div>
          <div class="text-sm opacity-90">ƒê·∫øn: ${emailData.to}</div>
          <div class="text-xs opacity-75">ƒê∆°n h√†ng: ${emailData.orderNumber}</div>
        </div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 6 gi√¢y
    setTimeout(() => {
      if (notification && notification.parentNode) {
        notification.style.transform = 'translateX(100%)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }
    }, 6000);
  }

  // G·ª≠i email ch·ªù x√°c nh·∫≠n sau khi kh√°ch h√†ng b√°o ƒë√£ chuy·ªÉn kho·∫£n
  static async sendPendingConfirmationEmail(
    customerEmail: string,
    customerName: string,
    orderNumber: string,
    amount: number,
    bankInfo: any
  ): Promise<boolean> {
    const emailData: EmailData = {
      to: customerEmail,
      subject: `Ch·ªù x√°c nh·∫≠n thanh to√°n - ƒê∆°n h√†ng ${orderNumber}`,
      customerName,
      orderNumber,
      amount,
      paymentMethod: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
      type: 'pending_confirmation',
      bankInfo
    };

    return await this.sendEmail(emailData);
  }

  // G·ª≠i email x√°c nh·∫≠n thanh to√°n sau khi admin duy·ªát
  static async sendPaymentConfirmedEmail(
    customerEmail: string,
    customerName: string,
    orderNumber: string,
    amount: number,
    paymentMethod: string
  ): Promise<boolean> {
    const emailData: EmailData = {
      to: customerEmail,
      subject: `Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n - ƒê∆°n h√†ng ${orderNumber}`,
      customerName,
      orderNumber,
      amount,
      paymentMethod,
      type: 'payment_confirmed'
    };

    return await this.sendEmail(emailData);
  }

  // G·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
  static async sendOrderStatusUpdateEmail(
    customerEmail: string,
    customerName: string,
    orderNumber: string,
    amount: number,
    paymentMethod: string,
    status: string
  ): Promise<boolean> {
    const statusLabels: { [key: string]: string } = {
      completed: 'Ho√†n th√†nh',
      processing: 'ƒêang x·ª≠ l√Ω',
      failed: 'Th·∫•t b·∫°i',
      refunded: 'Ho√†n ti·ªÅn',
      pending: 'Ch·ªù x·ª≠ l√Ω'
    };

    const emailData: EmailData = {
      to: customerEmail,
      subject: `C·∫≠p nh·∫≠t ƒë∆°n h√†ng ${orderNumber}`,
      customerName,
      orderNumber,
      amount,
      paymentMethod,
      type: 'order_status_update',
      status: statusLabels[status] || status
    };

    return await this.sendEmail(emailData);
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o demo email
  private static showDemoNotification(emailData: EmailData, emailContent: any) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm animate-slide-in border border-blue-500';
    
    notification.innerHTML = `
      <div class="flex items-center">
        <div class="mr-3">üìß</div>
        <div>
          <div class="font-medium">Email Demo Sent</div>
          <div class="text-sm opacity-90">G·ª≠i ƒë·∫øn: ${emailData.to}</div>
          <div class="text-xs opacity-75 mt-1">Ch·∫ø ƒë·ªô demo - Email th·ª±c s·∫Ω ho·∫°t ƒë·ªông sau khi setup EmailJS</div>
        </div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 6 gi√¢y
    setTimeout(() => {
      if (notification && notification.parentNode) {
        notification.style.transform = 'translateX(100%)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }
    }, 6000);
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói g·ª≠i email
  private static showErrorNotification(emailData: EmailData, error: any) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-red-600 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm animate-slide-in border border-red-500';
    
    const errorMsg = error?.text || error?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
    const isConfigError = errorMsg.includes('Account not found') || errorMsg.includes('404');
    
    notification.innerHTML = `
      <div class="flex items-center">
        <div class="mr-3">‚ùå</div>
        <div>
          <div class="font-medium">${isConfigError ? 'EmailJS ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh' : 'L·ªói g·ª≠i email'}</div>
          <div class="text-sm opacity-90">${isConfigError ? 'C·∫ßn setup EmailJS ƒë·ªÉ g·ª≠i email th·∫≠t' : `Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫øn ${emailData.to}`}</div>
          <div class="text-xs opacity-75 mt-1">${isConfigError ? 'ƒêang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo' : errorMsg}</div>
        </div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 8 gi√¢y
    setTimeout(() => {
      if (notification && notification.parentNode) {
        notification.style.transform = 'translateX(100%)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }
    }, 8000);
  }

  // Setup EmailJS Templates (h∆∞·ªõng d·∫´n cho developer)
  static getEmailJSSetupInstructions() {
    return `
H∆Ø·ªöNG D·∫™N SETUP EMAILJS:

1. ƒêƒÉng k√Ω t√†i kho·∫£n t·∫°i https://www.emailjs.com/
2. T·∫°o Email Service (Gmail, Outlook, v.v.)
3. T·∫°o Email Template v·ªõi c√°c bi·∫øn sau:
   - {{to_name}} - T√™n kh√°ch h√†ng
   - {{subject}} - Ti√™u ƒë·ªÅ email
   - {{customer_name}} - T√™n kh√°ch h√†ng
   - {{order_number}} - M√£ ƒë∆°n h√†ng
   - {{amount}} - S·ªë ti·ªÅn
   - {{payment_method}} - Ph∆∞∆°ng th·ª©c thanh to√°n
   - {{timestamp}} - Th·ªùi gian
   - {{message_content}} - N·ªôi dung chi ti·∫øt
   - {{from_name}} - T√™n ng∆∞·ªùi g·ª≠i
   
4. C·∫≠p nh·∫≠t c√°c constants trong EmailService:
   - SERVICE_ID: ID c·ªßa service b·∫°n t·∫°o
   - TEMPLATE_ID: ID c·ªßa template b·∫°n t·∫°o
   - PUBLIC_KEY: Public key t·ª´ t√†i kho·∫£n EmailJS

Template m·∫´u:
Subject: {{subject}}

{{message_content}}

Tr√¢n tr·ªçng,
{{from_name}}
    `;
  }
}